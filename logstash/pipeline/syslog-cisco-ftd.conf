input {
  udp {
    port => "514"
    type => "syslog-cisco-ftd"
  }
 
}

 filter {
  # NOTE: The frontend logstash servers set the type of incoming messages. FROM PORT
  if [type] == "syslog-cisco-ftd" {
    fingerprint {
      source              => [ "message" ]
      method              => "SHA1"
      key                 => "Some super secret passphrase for uniqueness."
      concatenate_sources => true
    }

    # Parse the log entry into sections.  Cisco doesn't use a consistent log format, unfortunately.
    grok {
      # There are a couple of custom patterns associated with this filter.
      patterns_dir => [ "/opt/logstash/patterns" ]

      match => [
		"message", "%FTD-%{DATA:severity_level}-%{DATA:eventid}: %{GREEDYDATA:msg}"
      ]

      overwrite => [ "message" ]

      add_tag => [ "cisco" ]

      remove_field => [ "syslog5424_pri", "@version" ]
    }
  }
  
  

  # If we made it here, the grok was sucessful
  if "cisco" in [tags] {
    date {
      match => [
        "log_date",

        # IOS
        "MMM dd HH:mm:ss.SSS ZZZ",
        "MMM dd HH:mm:ss ZZZ",
        "MMM dd HH:mm:ss.SSS",

        # Nexus
        "YYYY MMM dd HH:mm:ss.SSS ZZZ",
        "YYYY MMM dd HH:mm:ss ZZZ",
        "YYYY MMM dd HH:mm:ss.SSS",

        # Hail marry
        "ISO8601"
      ]
    }

    # Add the log level's name instead of just a number.
    mutate {
      gsub => [
        "severity_level", "0", "0 - Emergency",
        "severity_level", "1", "1 - Alert",
        "severity_level", "2", "2 - Critical",
        "severity_level", "3", "3 - Error",
        "severity_level", "4", "4 - Warning",
        "severity_level", "5", "5 - Notification",
        "severity_level", "6", "6 - Informational"
      ]
    }

    # Translate the short facility name into a full name.
    # NOTE:  This is a third party plugin: logstash-filter-translate
    translate {
      field       => "facility"
      destination => "facility_full"

      dictionary => [
        "AAA", "Authentication, authorization, and accounting",
        "BGP", "Border Gateway Protocol",
        "CPU_INTF_FPGA", "CPU Interface FPGA",
        "CPU_MONITOR", "CPU monitor",
        "CRYPTO", "Encryption",
        "CRYPTO_HA", "Crypto High Availability",
        "CRYPTO_HA_IKE", "Crypto High Availability",
        "CRYPTO_HA_IPSEC", "Crypto High Availability",
        "DOT1Q", "802.1q",
        "HSRP", "Hot Standby Router Protocol (HSRP)",
        "LINECARD", "Node Route Processor (NRP) line card",
        "LINEPROTO", "Line Protocol",
        "LINK", "Data link",
        "OSPF", "Open Shortest Path First (OSPF)",
        "SPAN", "Spanning Tree Protocol",
        "SPANTREE", "Spanning Tree",
        "SPANTREE_FAST", "Spanning Tree Fast Convergence",
        "SPANTREE_VLAN_SW", "Spanning Tree VLAN switch",
        "SYS", "Operating system"

      ]
    } # translate
  } # if

} # filter



output {

	## Useful for debugging
	#	stdout { codec => rubydebug }
	#	file {
	#		path => "/var/log/network.log"
	#	}
	
	elasticsearch {
	
		hosts => "elasticsearch:9200"
		index => "syslog"
	}#elastic_out
	
	stdout {
		codec => rubydebug
	}
	#Also output to file
	#file {
	#	path => "/var/log/abc.log"
	#	#path => "/var/logs/%{+YYYY}/%{+YYYY-MM}/%{+YYYY-MM-dd}.log"
	#}
}
